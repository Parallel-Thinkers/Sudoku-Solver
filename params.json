{
  "name": "Sudoku-solver",
  "tagline": "",
  "body": "# Sudoku-Solver\r\n\r\nINTRODUCTION :\r\nSUDOKU is a logic-based number-placement puzzle\r\nwhich is usually solved by hand for fun. For example, a 9X9 Sudoku puzzle may look as in\r\nFig. 1. The initial set of occu-pied cells are called the “clues” of the puzzle. The objective is\r\nto fill the empty cells in the puzzle such that the digits 1....9 occur only once in each row,\r\neach column and each 3X3 box.\r\n\r\nTaking the 9X9 Sudoku puzzle shown in Fig. 1 as an ex-ample, the four types of constraints\r\nthat one needs to satisfy to solve the puzzle are as follows.\r\n• Row constraints: Each row of should comprise all digits\r\n• Column constraints: Each column of should comprise all\r\ndigits\r\n• Box constraints: Each 3 3 highlighted box of should\r\ncomprise all digits\r\n• Cell constraints: Each cell of should be filled.\r\nPROCEDURE :\r\nThe sudoku solver is implemented using Rule 1, Rule 2 and backtracking.\r\n1. Rule 1 - This technique is very easy – especially if you’re using pencilmarks to store\r\nwhat candidates are still possible within each cell.\r\nIf you’ve managed to rule out all other possibilities for a particular cell (by examining the\r\nsurrounding column, row and box), so there’s only one number left that could possibly fit\r\nthere – you can fill in that number. In Fig .2. we can see the output given by Rule 1.\r\n2. Rule 2 – In this rule we have to scan all the nodes that contains multiple possible values\r\nand for a perticular node for a possible value we have to see whether that appears in a row\r\nor a column or a grid, if it does'nt appears in any one of these than we assign the value to\r\nthat node.\r\n3. Backtracking - Like all other Backtracking problems, we can solve Sudoku by one by\r\none assigning numbers to empty cells. Before assigning a number, we check whether it is\r\nsafe to assign. We basically check that the same number is not present in current row,\r\ncurrent column and current 3X3 subgrid. After checking for safety, we assign the number,\r\nand recursively check whether this assignment leads to a solution or not. If the assignment\r\ndoesn’t lead to a solution, then we try next number for current empty cell. And if none of\r\nnumber (1 to 9) l ead to solution, we return false.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}